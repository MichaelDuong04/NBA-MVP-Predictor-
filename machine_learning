{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "202537d7-1755-4f9e-8833-ebe87550561d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "33e58add-edea-4c78-a32c-ff06bd4ff992",
   "metadata": {},
   "outputs": [],
   "source": [
    "stats = pd.read_csv(\"player_mvp_stats.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "162f6607-212d-4ae3-9f33-9c47c9f5cc64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Player</th>\n",
       "      <th>Age</th>\n",
       "      <th>Team</th>\n",
       "      <th>Pos</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>...</th>\n",
       "      <th>Pts Won</th>\n",
       "      <th>Pts Max</th>\n",
       "      <th>Share</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>W/L%</th>\n",
       "      <th>GB</th>\n",
       "      <th>PS/G</th>\n",
       "      <th>PA/G</th>\n",
       "      <th>SRS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Doc Rivers</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>PG</td>\n",
       "      <td>79.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>32.7</td>\n",
       "      <td>5.6</td>\n",
       "      <td>12.9</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>43.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Dominique Wilkins</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SF</td>\n",
       "      <td>81.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>20.2</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>960.0</td>\n",
       "      <td>0.030</td>\n",
       "      <td>43.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Duane Ferrell</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SF</td>\n",
       "      <td>78.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14.9</td>\n",
       "      <td>2.2</td>\n",
       "      <td>4.6</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>43.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Gary Leonard</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>C</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>43.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>John Battle</td>\n",
       "      <td>28.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SG</td>\n",
       "      <td>79.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>23.6</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.9</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>43.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15820</th>\n",
       "      <td>15820</td>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>875.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15821</th>\n",
       "      <td>15821</td>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>0.010</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15822</th>\n",
       "      <td>15822</td>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>674.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>0.674</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15823</th>\n",
       "      <td>15823</td>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>566.0</td>\n",
       "      <td>990.0</td>\n",
       "      <td>0.572</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15824</th>\n",
       "      <td>15824</td>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>926.0</td>\n",
       "      <td>990.0</td>\n",
       "      <td>0.935</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15825 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0             Player   Age           Team Pos     G    GS  \\\n",
       "0               0         Doc Rivers  29.0  Atlanta Hawks  PG  79.0  79.0   \n",
       "1               1  Dominique Wilkins  31.0  Atlanta Hawks  SF  81.0  81.0   \n",
       "2               2      Duane Ferrell  25.0  Atlanta Hawks  SF  78.0   2.0   \n",
       "3               3       Gary Leonard  23.0  Atlanta Hawks   C   4.0   0.0   \n",
       "4               4        John Battle  28.0  Atlanta Hawks  SG  79.0   2.0   \n",
       "...           ...                ...   ...            ...  ..   ...   ...   \n",
       "15820       15820      Nikola JokiÄ   0.0              0   0   0.0   0.0   \n",
       "15821       15821      Luka DonÄiÄ   0.0              0   0   0.0   0.0   \n",
       "15822       15822      Nikola JokiÄ   0.0              0   0   0.0   0.0   \n",
       "15823       15823      Luka DonÄiÄ   0.0              0   0   0.0   0.0   \n",
       "15824       15824      Nikola JokiÄ   0.0              0   0   0.0   0.0   \n",
       "\n",
       "         MP   FG   FGA  ...  Pts Won  Pts Max  Share     W     L   W/L%    GB  \\\n",
       "0      32.7  5.6  12.9  ...      0.0      0.0  0.000  43.0  39.0  0.524  18.0   \n",
       "1      38.0  9.5  20.2  ...     29.0    960.0  0.030  43.0  39.0  0.524  18.0   \n",
       "2      14.9  2.2   4.6  ...      0.0      0.0  0.000  43.0  39.0  0.524  18.0   \n",
       "3       2.3  0.0   0.0  ...      0.0      0.0  0.000  43.0  39.0  0.524  18.0   \n",
       "4      23.6  5.0  10.9  ...      0.0      0.0  0.000  43.0  39.0  0.524  18.0   \n",
       "...     ...  ...   ...  ...      ...      ...    ...   ...   ...    ...   ...   \n",
       "15820   0.0  0.0   0.0  ...    875.0   1000.0  0.875   0.0   0.0  0.000   0.0   \n",
       "15821   0.0  0.0   0.0  ...     10.0   1000.0  0.010   0.0   0.0  0.000   0.0   \n",
       "15822   0.0  0.0   0.0  ...    674.0   1000.0  0.674   0.0   0.0  0.000   0.0   \n",
       "15823   0.0  0.0   0.0  ...    566.0    990.0  0.572   0.0   0.0  0.000   0.0   \n",
       "15824   0.0  0.0   0.0  ...    926.0    990.0  0.935   0.0   0.0  0.000   0.0   \n",
       "\n",
       "        PS/G   PA/G   SRS  \n",
       "0      109.8  109.0  0.72  \n",
       "1      109.8  109.0  0.72  \n",
       "2      109.8  109.0  0.72  \n",
       "3      109.8  109.0  0.72  \n",
       "4      109.8  109.0  0.72  \n",
       "...      ...    ...   ...  \n",
       "15820    0.0    0.0  0.00  \n",
       "15821    0.0    0.0  0.00  \n",
       "15822    0.0    0.0  0.00  \n",
       "15823    0.0    0.0  0.00  \n",
       "15824    0.0    0.0  0.00  \n",
       "\n",
       "[15825 rows x 41 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "75844b3a-b88c-4889-b60b-6fb7128a31ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "del stats[\"Unnamed: 0\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08214379-abc3-4808-9220-13e5faed8d26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player     0\n",
       "Age        0\n",
       "Team       0\n",
       "Pos        0\n",
       "G          0\n",
       "GS         0\n",
       "MP         0\n",
       "FG         0\n",
       "FGA        0\n",
       "FG%        0\n",
       "3P         0\n",
       "3PA        0\n",
       "3P%        0\n",
       "2P         0\n",
       "2PA        0\n",
       "2P%        0\n",
       "eFG%       0\n",
       "FT         0\n",
       "FTA        0\n",
       "FT%        0\n",
       "ORB        0\n",
       "DRB        0\n",
       "TRB        0\n",
       "AST        0\n",
       "STL        0\n",
       "BLK        0\n",
       "TOV        0\n",
       "PF         0\n",
       "PTS        0\n",
       "Year       0\n",
       "Pts Won    0\n",
       "Pts Max    0\n",
       "Share      0\n",
       "W          0\n",
       "L          0\n",
       "W/L%       0\n",
       "GB         0\n",
       "PS/G       0\n",
       "PA/G       0\n",
       "SRS        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isnull(stats).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "70eb8795-f4e2-4f29-9473-a6c87e165d22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Player', 'Age', 'Team', 'Pos', 'G', 'GS', 'MP', 'FG', 'FGA', 'FG%',\n",
       "       '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%',\n",
       "       'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS', 'Year',\n",
       "       'Pts Won', 'Pts Max', 'Share', 'W', 'L', 'W/L%', 'GB', 'PS/G', 'PA/G',\n",
       "       'SRS'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7dc6a4e5-e8b7-4238-94e6-1b66048fd117",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors = [\"Age\", \"G\", \"GS\", \"MP\", \"FG\", \"FGA\", 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS', 'W', 'L', 'W/L%',\n",
    "       'GB', 'PS/G', 'PA/G', 'SRS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c4799260-88f2-4519-b263-f9aefca03623",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = stats[stats[\"Year\"] < 2020]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9916504c-4698-403d-a4a1-f876fbebdb80",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = stats[stats[\"Year\"] == 2020]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1b2651b1-18be-4345-8311-b424e5ac5969",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge \n",
    "reg = Ridge(alpha=.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ebf0c3f5-bbb7-461c-9f17-88cde61ec03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Ridge<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.Ridge.html\">?<span>Documentation for Ridge</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Ridge(alpha=0.1)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "Ridge(alpha=0.1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.fit(train[predictors], train[\"Share\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "336d30d6-6de4-40a3-9815-4c87c6aee303",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = reg.predict(test[predictors])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7f36c696-41d6-41c7-a5f4-30a222dff8a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = pd.DataFrame(predictions, columns=[\"predictions\"], index=test.index)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "40ef648f-6648-4aeb-b939-844f23493dd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>-0.004520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>-0.015554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>-0.025654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>454</th>\n",
       "      <td>-0.011063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>455</th>\n",
       "      <td>-0.006499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15725</th>\n",
       "      <td>0.011146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15726</th>\n",
       "      <td>0.031557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15727</th>\n",
       "      <td>-0.005399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15815</th>\n",
       "      <td>0.082791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>0.082791</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>531 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       predictions\n",
       "451      -0.004520\n",
       "452      -0.015554\n",
       "453      -0.025654\n",
       "454      -0.011063\n",
       "455      -0.006499\n",
       "...            ...\n",
       "15725     0.011146\n",
       "15726     0.031557\n",
       "15727    -0.005399\n",
       "15815     0.082791\n",
       "15816     0.082791\n",
       "\n",
       "[531 rows x 1 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8a2fdd56-a5a4-4a68-944a-fff91671540b",
   "metadata": {},
   "outputs": [],
   "source": [
    "combination = pd.concat([test[[\"Player\", \"Share\"]], predictions], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "07ab957c-a1be-4fb6-a689-d3380d07bdab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8584</th>\n",
       "      <td>Giannis Antetokounmpo</td>\n",
       "      <td>0.952</td>\n",
       "      <td>0.237546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7112</th>\n",
       "      <td>LeBron James</td>\n",
       "      <td>0.746</td>\n",
       "      <td>0.161388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5503</th>\n",
       "      <td>James Harden</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.185993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15815</th>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.082791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6576</th>\n",
       "      <td>Kawhi Leonard</td>\n",
       "      <td>0.166</td>\n",
       "      <td>0.132079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7100</th>\n",
       "      <td>Anthony Davis</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.146161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10603</th>\n",
       "      <td>Chris Paul</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.080024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12737</th>\n",
       "      <td>Damian Lillard</td>\n",
       "      <td>0.023</td>\n",
       "      <td>0.131812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.082791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14546</th>\n",
       "      <td>Pascal Siakam</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.078482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8052</th>\n",
       "      <td>Jimmy Butler</td>\n",
       "      <td>0.009</td>\n",
       "      <td>0.093181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>Jayson Tatum</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.076660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10614</th>\n",
       "      <td>Mike Muscala</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.008316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10613</th>\n",
       "      <td>Luguentz Dort</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.034585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10612</th>\n",
       "      <td>Kevin Hervey</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.011835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10611</th>\n",
       "      <td>Justin Patton</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.002837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10341</th>\n",
       "      <td>Dennis Smith Jr.</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.011218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10610</th>\n",
       "      <td>Isaiah Roby</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.013333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10609</th>\n",
       "      <td>Hamidou Diallo</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.015065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10608</th>\n",
       "      <td>Devon Hall</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.004850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Player  Share  predictions\n",
       "8584   Giannis Antetokounmpo  0.952     0.237546\n",
       "7112            LeBron James  0.746     0.161388\n",
       "5503            James Harden  0.363     0.185993\n",
       "15815          Luka DonÄiÄ  0.198     0.082791\n",
       "6576           Kawhi Leonard  0.166     0.132079\n",
       "7100           Anthony Davis  0.081     0.146161\n",
       "10603             Chris Paul  0.026     0.080024\n",
       "12737         Damian Lillard  0.023     0.131812\n",
       "15816          Nikola JokiÄ  0.018     0.082791\n",
       "14546          Pascal Siakam  0.017     0.078482\n",
       "8052            Jimmy Butler  0.009     0.093181\n",
       "995             Jayson Tatum  0.001     0.076660\n",
       "10614           Mike Muscala  0.000     0.008316\n",
       "10613          Luguentz Dort  0.000    -0.034585\n",
       "10612           Kevin Hervey  0.000     0.011835\n",
       "10611          Justin Patton  0.000    -0.002837\n",
       "10341       Dennis Smith Jr.  0.000    -0.011218\n",
       "10610            Isaiah Roby  0.000     0.013333\n",
       "10609         Hamidou Diallo  0.000    -0.015065\n",
       "10608             Devon Hall  0.000     0.004850"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combination.sort_values(\"Share\", ascending=False).head(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "853b746a-2e32-42b5-b80a-f59f99c25190",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.002606920406587854"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "mean_squared_error(combination[\"Share\"], combination[\"predictions\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1244e0ed-426a-4a7f-8203-04fb6dbe403b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Share\n",
       "0.000    519\n",
       "0.001      1\n",
       "0.363      1\n",
       "0.166      1\n",
       "0.081      1\n",
       "0.746      1\n",
       "0.009      1\n",
       "0.952      1\n",
       "0.026      1\n",
       "0.023      1\n",
       "0.017      1\n",
       "0.198      1\n",
       "0.018      1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combination[\"Share\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "92d94265-43af-4a27-9ce0-a4d87273c949",
   "metadata": {},
   "outputs": [],
   "source": [
    "combination = combination.sort_values(\"Share\", ascending = False)\n",
    "combination[\"Rk\"] = list(range(1, combination.shape[0]+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "dea30296-a868-4dc4-b84d-20f0ee5ec6a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Rk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8584</th>\n",
       "      <td>Giannis Antetokounmpo</td>\n",
       "      <td>0.952</td>\n",
       "      <td>0.237546</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7112</th>\n",
       "      <td>LeBron James</td>\n",
       "      <td>0.746</td>\n",
       "      <td>0.161388</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5503</th>\n",
       "      <td>James Harden</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.185993</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15815</th>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.082791</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6576</th>\n",
       "      <td>Kawhi Leonard</td>\n",
       "      <td>0.166</td>\n",
       "      <td>0.132079</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7100</th>\n",
       "      <td>Anthony Davis</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.146161</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10603</th>\n",
       "      <td>Chris Paul</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.080024</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12737</th>\n",
       "      <td>Damian Lillard</td>\n",
       "      <td>0.023</td>\n",
       "      <td>0.131812</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.082791</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14546</th>\n",
       "      <td>Pascal Siakam</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.078482</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Player  Share  predictions  Rk\n",
       "8584   Giannis Antetokounmpo  0.952     0.237546   1\n",
       "7112            LeBron James  0.746     0.161388   2\n",
       "5503            James Harden  0.363     0.185993   3\n",
       "15815          Luka DonÄiÄ  0.198     0.082791   4\n",
       "6576           Kawhi Leonard  0.166     0.132079   5\n",
       "7100           Anthony Davis  0.081     0.146161   6\n",
       "10603             Chris Paul  0.026     0.080024   7\n",
       "12737         Damian Lillard  0.023     0.131812   8\n",
       "15816          Nikola JokiÄ  0.018     0.082791   9\n",
       "14546          Pascal Siakam  0.017     0.078482  10"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combination.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2d8b2056-0728-4d15-985c-fe0aa27bc2f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "combination = combination.sort_values(\"predictions\", ascending = False)\n",
    "combination[\"Predicted_Rk\"] = list(range(1, combination.shape[0]+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c35934dd-5698-4bb1-9be9-d1782be535b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Rk</th>\n",
       "      <th>Predicted_Rk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8584</th>\n",
       "      <td>Giannis Antetokounmpo</td>\n",
       "      <td>0.952</td>\n",
       "      <td>0.237546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5503</th>\n",
       "      <td>James Harden</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.185993</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3354</th>\n",
       "      <td>Luka Dončić</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.165877</td>\n",
       "      <td>318</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7112</th>\n",
       "      <td>LeBron James</td>\n",
       "      <td>0.746</td>\n",
       "      <td>0.161388</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7100</th>\n",
       "      <td>Anthony Davis</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.146161</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6576</th>\n",
       "      <td>Kawhi Leonard</td>\n",
       "      <td>0.166</td>\n",
       "      <td>0.132079</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12737</th>\n",
       "      <td>Damian Lillard</td>\n",
       "      <td>0.023</td>\n",
       "      <td>0.131812</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11692</th>\n",
       "      <td>Joel Embiid</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.125030</td>\n",
       "      <td>46</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9115</th>\n",
       "      <td>Karl-Anthony Towns</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.120347</td>\n",
       "      <td>127</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>Trae Young</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.117304</td>\n",
       "      <td>355</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Player  Share  predictions   Rk  Predicted_Rk\n",
       "8584   Giannis Antetokounmpo  0.952     0.237546    1             1\n",
       "5503            James Harden  0.363     0.185993    3             2\n",
       "3354             Luka Dončić  0.000     0.165877  318             3\n",
       "7112            LeBron James  0.746     0.161388    2             4\n",
       "7100           Anthony Davis  0.081     0.146161    6             5\n",
       "6576           Kawhi Leonard  0.166     0.132079    5             6\n",
       "12737         Damian Lillard  0.023     0.131812    8             7\n",
       "11692            Joel Embiid  0.000     0.125030   46             8\n",
       "9115      Karl-Anthony Towns  0.000     0.120347  127             9\n",
       "464               Trae Young  0.000     0.117304  355            10"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combination.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b5c2aa41-fb77-4158-ae5f-1463c39a50b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Rk</th>\n",
       "      <th>Predicted_Rk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8584</th>\n",
       "      <td>Giannis Antetokounmpo</td>\n",
       "      <td>0.952</td>\n",
       "      <td>0.237546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7112</th>\n",
       "      <td>LeBron James</td>\n",
       "      <td>0.746</td>\n",
       "      <td>0.161388</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5503</th>\n",
       "      <td>James Harden</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.185993</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15815</th>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.082791</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6576</th>\n",
       "      <td>Kawhi Leonard</td>\n",
       "      <td>0.166</td>\n",
       "      <td>0.132079</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7100</th>\n",
       "      <td>Anthony Davis</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.146161</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10603</th>\n",
       "      <td>Chris Paul</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.080024</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12737</th>\n",
       "      <td>Damian Lillard</td>\n",
       "      <td>0.023</td>\n",
       "      <td>0.131812</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.082791</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14546</th>\n",
       "      <td>Pascal Siakam</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.078482</td>\n",
       "      <td>10</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Player  Share  predictions  Rk  Predicted_Rk\n",
       "8584   Giannis Antetokounmpo  0.952     0.237546   1             1\n",
       "7112            LeBron James  0.746     0.161388   2             4\n",
       "5503            James Harden  0.363     0.185993   3             2\n",
       "15815          Luka DonÄiÄ  0.198     0.082791   4            23\n",
       "6576           Kawhi Leonard  0.166     0.132079   5             6\n",
       "7100           Anthony Davis  0.081     0.146161   6             5\n",
       "10603             Chris Paul  0.026     0.080024   7            26\n",
       "12737         Damian Lillard  0.023     0.131812   8             7\n",
       "15816          Nikola JokiÄ  0.018     0.082791   9            22\n",
       "14546          Pascal Siakam  0.017     0.078482  10            29"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combination.sort_values(\"Share\", ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ff414cc8-e31d-4cba-bf68-b68e167499f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_ap(combination):\n",
    "    actual = combination.sort_values(\"Share\", ascending = False).head(5)\n",
    "    predicted = combination.sort_values(\"predictions\", ascending = False)\n",
    "\n",
    "    ps = []\n",
    "    found = 0\n",
    "    seen = 1\n",
    "    \n",
    "\n",
    "    for index, row in predicted.iterrows():\n",
    "        if row[\"Player\"] in actual[\"Player\"].values:\n",
    "            found += 1\n",
    "            ps.append(found / seen)\n",
    "        seen += 1\n",
    "\n",
    "    return sum(ps) / len(ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "db006dfc-0c94-47ff-8f4c-b3df886e78a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7268115942028985"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "find_ap(combination)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3cb790d6-ec5d-455d-95b4-e8a79a844b42",
   "metadata": {},
   "outputs": [],
   "source": [
    "years = list(range(1991, 2025))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "740745f8-4a07-4b44-8a06-603423939221",
   "metadata": {},
   "outputs": [],
   "source": [
    "aps = []\n",
    "all_predictions = []\n",
    "\n",
    "for year in years[5:]: \n",
    "    train = stats[stats[\"Year\"] < year]\n",
    "    test = stats[stats[\"Year\"] == year]\n",
    "    reg.fit(train[predictors], train[\"Share\"])\n",
    "    predictions = reg.predict(test[predictors])\n",
    "    predictions = pd.DataFrame(predictions, columns=[\"predictions\"], index=test.index)\n",
    "    combination = pd.concat([test[[\"Player\", \"Share\"]], predictions], axis=1)\n",
    "    all_predictions.append(combination)\n",
    "    aps.append(find_ap(combination))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b57c61eb-fc6e-4960-bc77-7d1d33555089",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6952799778325109"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(aps)/len(aps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "106afedf-4868-49a2-a95b-e5d322585479",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_ranks(predictions):\n",
    "    predictions = predictions.sort_values(\"predictions\", ascending=False)\n",
    "    predictions[\"Predicted_Rk\"] = list(range(1,predictions.shape[0]+1))\n",
    "    predictions = predictions.sort_values(\"Share\", ascending=False)\n",
    "    predictions[\"Rk\"] = list(range(1,predictions.shape[0]+1))\n",
    "    predictions[\"Diff\"] = (predictions[\"Rk\"] - predictions[\"Predicted_Rk\"])\n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c44a4b68-c9fa-4da3-a8ae-4b71ea337510",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Predicted_Rk</th>\n",
       "      <th>Rk</th>\n",
       "      <th>Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13444</th>\n",
       "      <td>David Robinson</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.131130</td>\n",
       "      <td>5</td>\n",
       "      <td>308</td>\n",
       "      <td>303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15348</th>\n",
       "      <td>Chris Webber</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.089409</td>\n",
       "      <td>11</td>\n",
       "      <td>307</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12383</th>\n",
       "      <td>Arvydas Sabonis</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.086650</td>\n",
       "      <td>12</td>\n",
       "      <td>306</td>\n",
       "      <td>294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7671</th>\n",
       "      <td>Bruce Bowen</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.077543</td>\n",
       "      <td>13</td>\n",
       "      <td>305</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1901</th>\n",
       "      <td>Toni Kukoč</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.039394</td>\n",
       "      <td>45</td>\n",
       "      <td>334</td>\n",
       "      <td>289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14179</th>\n",
       "      <td>Popeye Jones</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.048863</td>\n",
       "      <td>439</td>\n",
       "      <td>154</td>\n",
       "      <td>-285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14165</th>\n",
       "      <td>Benoit Benjamin</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.007356</td>\n",
       "      <td>307</td>\n",
       "      <td>22</td>\n",
       "      <td>-285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>Anthony Miller</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.030164</td>\n",
       "      <td>413</td>\n",
       "      <td>126</td>\n",
       "      <td>-287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>Dennis Rodman</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.054598</td>\n",
       "      <td>440</td>\n",
       "      <td>153</td>\n",
       "      <td>-287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15182</th>\n",
       "      <td>Lee Mayberry</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.030554</td>\n",
       "      <td>415</td>\n",
       "      <td>125</td>\n",
       "      <td>-290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>441 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Player  Share  predictions  Predicted_Rk   Rk  Diff\n",
       "13444   David Robinson    0.0     0.131130             5  308   303\n",
       "15348     Chris Webber    0.0     0.089409            11  307   296\n",
       "12383  Arvydas Sabonis    0.0     0.086650            12  306   294\n",
       "7671       Bruce Bowen    0.0     0.077543            13  305   292\n",
       "1901        Toni Kukoč    0.0     0.039394            45  334   289\n",
       "...                ...    ...          ...           ...  ...   ...\n",
       "14179     Popeye Jones    0.0    -0.048863           439  154  -285\n",
       "14165  Benoit Benjamin    0.0    -0.007356           307   22  -285\n",
       "89      Anthony Miller    0.0    -0.030164           413  126  -287\n",
       "1889     Dennis Rodman    0.0    -0.054598           440  153  -287\n",
       "15182     Lee Mayberry    0.0    -0.030554           415  125  -290\n",
       "\n",
       "[441 rows x 6 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_ranks(all_predictions[1]).sort_values(\"Diff\", ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "7eace8c4-3826-4d1c-8a47-9e155ae64da4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Predicted_Rk</th>\n",
       "      <th>Rk</th>\n",
       "      <th>Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14730</th>\n",
       "      <td>Karl Malone</td>\n",
       "      <td>0.857</td>\n",
       "      <td>0.192356</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1895</th>\n",
       "      <td>Michael Jordan</td>\n",
       "      <td>0.832</td>\n",
       "      <td>0.167650</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4063</th>\n",
       "      <td>Grant Hill</td>\n",
       "      <td>0.327</td>\n",
       "      <td>0.128644</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7684</th>\n",
       "      <td>Tim Hardaway</td>\n",
       "      <td>0.207</td>\n",
       "      <td>0.059966</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1546</th>\n",
       "      <td>Glen Rice</td>\n",
       "      <td>0.117</td>\n",
       "      <td>0.033107</td>\n",
       "      <td>53</td>\n",
       "      <td>5</td>\n",
       "      <td>-48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Player  Share  predictions  Predicted_Rk  Rk  Diff\n",
       "14730     Karl Malone  0.857     0.192356             2   1    -1\n",
       "1895   Michael Jordan  0.832     0.167650             3   2    -1\n",
       "4063       Grant Hill  0.327     0.128644             6   3    -3\n",
       "7684     Tim Hardaway  0.207     0.059966            20   4   -16\n",
       "1546        Glen Rice  0.117     0.033107            53   5   -48"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ranking = add_ranks(all_predictions[1])\n",
    "ranking[ranking[\"Rk\"]<6].sort_values(\"Diff\", ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f72320cb-28fa-45ec-952c-c33019e5578b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest(stats, model, years, predictors):\n",
    "    aps = []\n",
    "    all_predictions = []\n",
    "    for year in years[5:]:\n",
    "        train = stats[stats[\"Year\"] < year]\n",
    "        test = stats[stats[\"Year\"] == year]\n",
    "        model.fit(train[predictors],train[\"Share\"])\n",
    "        predictions = model.predict(test[predictors])\n",
    "        predictions = pd.DataFrame(predictions, columns=[\"predictions\"], index=test.index)\n",
    "        combination = pd.concat([test[[\"Player\", \"Share\"]], predictions], axis=1)\n",
    "        combination = add_ranks(combination)\n",
    "        all_predictions.append(combination)\n",
    "        aps.append(find_ap(combination))\n",
    "    return sum(aps) / len(aps), aps, pd.concat(all_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b3a0fec9-f136-4945-b546-39516655e8c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_ap, aps, all_predictions = backtest(stats, reg, years[5:], predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "52f76e04-0791-407f-8779-286cf5bdd5cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.718222875138366"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_ap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "868300e9-d268-4de3-afa0-da78ad85ef8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Share</th>\n",
       "      <th>predictions</th>\n",
       "      <th>Predicted_Rk</th>\n",
       "      <th>Rk</th>\n",
       "      <th>Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9362</th>\n",
       "      <td>Jason Kidd</td>\n",
       "      <td>0.712</td>\n",
       "      <td>0.027948</td>\n",
       "      <td>53</td>\n",
       "      <td>2</td>\n",
       "      <td>-51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11994</th>\n",
       "      <td>Steve Nash</td>\n",
       "      <td>0.839</td>\n",
       "      <td>0.032379</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "      <td>-46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12012</th>\n",
       "      <td>Steve Nash</td>\n",
       "      <td>0.739</td>\n",
       "      <td>0.050234</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>-35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2148</th>\n",
       "      <td>Joakim Noah</td>\n",
       "      <td>0.258</td>\n",
       "      <td>0.047124</td>\n",
       "      <td>38</td>\n",
       "      <td>4</td>\n",
       "      <td>-34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15814</th>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.210</td>\n",
       "      <td>0.070661</td>\n",
       "      <td>34</td>\n",
       "      <td>4</td>\n",
       "      <td>-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15818</th>\n",
       "      <td>Nikola JokiÄ</td>\n",
       "      <td>0.961</td>\n",
       "      <td>0.085202</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12027</th>\n",
       "      <td>Steve Nash</td>\n",
       "      <td>0.785</td>\n",
       "      <td>0.069745</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15815</th>\n",
       "      <td>Luka DonÄiÄ</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.082791</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12253</th>\n",
       "      <td>Devin Booker</td>\n",
       "      <td>0.216</td>\n",
       "      <td>0.090149</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6969</th>\n",
       "      <td>Kobe Bryant</td>\n",
       "      <td>0.291</td>\n",
       "      <td>0.078315</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>-10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Player  Share  predictions  Predicted_Rk  Rk  Diff\n",
       "9362      Jason Kidd  0.712     0.027948            53   2   -51\n",
       "11994     Steve Nash  0.839     0.032379            47   1   -46\n",
       "12012     Steve Nash  0.739     0.050234            36   1   -35\n",
       "2148     Joakim Noah  0.258     0.047124            38   4   -34\n",
       "15814  Nikola JokiÄ  0.210     0.070661            34   4   -30\n",
       "15818  Nikola JokiÄ  0.961     0.085202            27   1   -26\n",
       "12027     Steve Nash  0.785     0.069745            23   2   -21\n",
       "15815  Luka DonÄiÄ  0.198     0.082791            23   4   -19\n",
       "12253   Devin Booker  0.216     0.090149            18   4   -14\n",
       "6969     Kobe Bryant  0.291     0.078315            14   4   -10"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_predictions[all_predictions[\"Rk\"] < 5].sort_values(\"Diff\").head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "33482014-1cb5-4a8c-b2ca-e5901f87d979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.121510</td>\n",
       "      <td>eFG%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.027593</td>\n",
       "      <td>DRB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.015486</td>\n",
       "      <td>2P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.015102</td>\n",
       "      <td>ORB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.014063</td>\n",
       "      <td>2P%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.012653</td>\n",
       "      <td>STL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.011816</td>\n",
       "      <td>FTA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.011113</td>\n",
       "      <td>BLK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.006987</td>\n",
       "      <td>PTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.006298</td>\n",
       "      <td>FGA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.005970</td>\n",
       "      <td>AST</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.001597</td>\n",
       "      <td>3P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.000954</td>\n",
       "      <td>W</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.000300</td>\n",
       "      <td>GB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000230</td>\n",
       "      <td>Age</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000093</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000011</td>\n",
       "      <td>GS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>-0.000018</td>\n",
       "      <td>SRS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>-0.000039</td>\n",
       "      <td>PA/G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>-0.000849</td>\n",
       "      <td>PS/G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.001037</td>\n",
       "      <td>FG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>-0.001209</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>-0.002537</td>\n",
       "      <td>PF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.003691</td>\n",
       "      <td>MP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>-0.005707</td>\n",
       "      <td>FT%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>-0.007580</td>\n",
       "      <td>FT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>-0.008640</td>\n",
       "      <td>TOV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.009724</td>\n",
       "      <td>3P%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.011389</td>\n",
       "      <td>3PA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>-0.015821</td>\n",
       "      <td>2PA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>-0.021305</td>\n",
       "      <td>TRB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>-0.118450</td>\n",
       "      <td>W/L%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-0.190735</td>\n",
       "      <td>FG%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0     1\n",
       "13  0.121510  eFG%\n",
       "18  0.027593   DRB\n",
       "10  0.015486    2P\n",
       "17  0.015102   ORB\n",
       "12  0.014063   2P%\n",
       "21  0.012653   STL\n",
       "15  0.011816   FTA\n",
       "22  0.011113   BLK\n",
       "25  0.006987   PTS\n",
       "5   0.006298   FGA\n",
       "20  0.005970   AST\n",
       "7   0.001597    3P\n",
       "26  0.000954     W\n",
       "29  0.000300    GB\n",
       "0   0.000230   Age\n",
       "1   0.000093     G\n",
       "2   0.000011    GS\n",
       "32 -0.000018   SRS\n",
       "31 -0.000039  PA/G\n",
       "30 -0.000849  PS/G\n",
       "4  -0.001037    FG\n",
       "27 -0.001209     L\n",
       "24 -0.002537    PF\n",
       "3  -0.003691    MP\n",
       "16 -0.005707   FT%\n",
       "14 -0.007580    FT\n",
       "23 -0.008640   TOV\n",
       "9  -0.009724   3P%\n",
       "8  -0.011389   3PA\n",
       "11 -0.015821   2PA\n",
       "19 -0.021305   TRB\n",
       "28 -0.118450  W/L%\n",
       "6  -0.190735   FG%"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([pd.Series(reg.coef_), pd.Series(predictors)], axis = 1).sort_values(0, ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6749b901-7466-46c4-a740-ec3ec7e5db32",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MikeyD\\AppData\\Local\\Temp\\ipykernel_26664\\3437527063.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  stat_ratios = stats[[\"PTS\", \"AST\", \"STL\", \"BLK\", \"3P\", \"Year\"]].groupby(\"Year\").apply(lambda x: x/x.mean())\n"
     ]
    }
   ],
   "source": [
    "stat_ratios = stats[[\"PTS\", \"AST\", \"STL\", \"BLK\", \"3P\", \"Year\"]].groupby(\"Year\").apply(lambda x: x/x.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "30933a10-facc-40ee-beb6-26ca8426e2bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>PTS</th>\n",
       "      <th>AST</th>\n",
       "      <th>STL</th>\n",
       "      <th>BLK</th>\n",
       "      <th>3P</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1991</th>\n",
       "      <th>0</th>\n",
       "      <td>1.692601</td>\n",
       "      <td>2.010078</td>\n",
       "      <td>2.608773</td>\n",
       "      <td>1.346939</td>\n",
       "      <td>5.594452</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.884104</td>\n",
       "      <td>1.542618</td>\n",
       "      <td>2.059558</td>\n",
       "      <td>1.795918</td>\n",
       "      <td>5.085865</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.679268</td>\n",
       "      <td>0.327222</td>\n",
       "      <td>0.549215</td>\n",
       "      <td>0.673469</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.055678</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.673469</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.514433</td>\n",
       "      <td>1.262142</td>\n",
       "      <td>0.823823</td>\n",
       "      <td>0.224490</td>\n",
       "      <td>1.017173</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2024</th>\n",
       "      <th>15805</th>\n",
       "      <td>0.595670</td>\n",
       "      <td>0.300839</td>\n",
       "      <td>0.509166</td>\n",
       "      <td>1.245660</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15806</th>\n",
       "      <td>1.012640</td>\n",
       "      <td>0.651817</td>\n",
       "      <td>0.848610</td>\n",
       "      <td>1.743924</td>\n",
       "      <td>1.066518</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15807</th>\n",
       "      <td>1.429609</td>\n",
       "      <td>3.660203</td>\n",
       "      <td>1.866943</td>\n",
       "      <td>0.747396</td>\n",
       "      <td>1.706429</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15823</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15824</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15825 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 PTS       AST       STL       BLK        3P  Year\n",
       "Year                                                              \n",
       "1991 0      1.692601  2.010078  2.608773  1.346939  5.594452   1.0\n",
       "     1      2.884104  1.542618  2.059558  1.795918  5.085865   1.0\n",
       "     2      0.679268  0.327222  0.549215  0.673469  0.000000   1.0\n",
       "     3      0.055678  0.000000  0.000000  0.673469  0.000000   1.0\n",
       "     4      1.514433  1.262142  0.823823  0.224490  1.017173   1.0\n",
       "...              ...       ...       ...       ...       ...   ...\n",
       "2024 15805  0.595670  0.300839  0.509166  1.245660  0.000000   1.0\n",
       "     15806  1.012640  0.651817  0.848610  1.743924  1.066518   1.0\n",
       "     15807  1.429609  3.660203  1.866943  0.747396  1.706429   1.0\n",
       "     15823  0.000000  0.000000  0.000000  0.000000  0.000000   1.0\n",
       "     15824  0.000000  0.000000  0.000000  0.000000  0.000000   1.0\n",
       "\n",
       "[15825 rows x 6 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stat_ratios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "770e5b7f-09a8-42a3-be8c-e63bf5300bf5",
   "metadata": {},
   "outputs": [],
   "source": [
    "stats = stats.reset_index(drop=True)\n",
    "stat_ratios = stat_ratios.reset_index(drop=True)\n",
    "stats[[\"PTS_T\", \"AST_R\", \"STL_R\", \"BLK_R\", \"3P_R\"]] = stat_ratios[[\"PTS\", \"AST\", \"STL\", \"BLK\", \"3P\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "cd127e9a-2572-4398-a502-733bed37fae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Age</th>\n",
       "      <th>Team</th>\n",
       "      <th>Pos</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>FG%</th>\n",
       "      <th>...</th>\n",
       "      <th>W/L%</th>\n",
       "      <th>GB</th>\n",
       "      <th>PS/G</th>\n",
       "      <th>PA/G</th>\n",
       "      <th>SRS</th>\n",
       "      <th>PTS_T</th>\n",
       "      <th>AST_R</th>\n",
       "      <th>STL_R</th>\n",
       "      <th>BLK_R</th>\n",
       "      <th>3P_R</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Doc Rivers</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>PG</td>\n",
       "      <td>79.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>32.7</td>\n",
       "      <td>5.6</td>\n",
       "      <td>12.9</td>\n",
       "      <td>0.435</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "      <td>1.692601</td>\n",
       "      <td>2.010078</td>\n",
       "      <td>2.608773</td>\n",
       "      <td>1.346939</td>\n",
       "      <td>5.594452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dominique Wilkins</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SF</td>\n",
       "      <td>81.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>20.2</td>\n",
       "      <td>0.470</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "      <td>2.884104</td>\n",
       "      <td>1.542618</td>\n",
       "      <td>2.059558</td>\n",
       "      <td>1.795918</td>\n",
       "      <td>5.085865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Duane Ferrell</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SF</td>\n",
       "      <td>78.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14.9</td>\n",
       "      <td>2.2</td>\n",
       "      <td>4.6</td>\n",
       "      <td>0.489</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.679268</td>\n",
       "      <td>0.327222</td>\n",
       "      <td>0.549215</td>\n",
       "      <td>0.673469</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gary Leonard</td>\n",
       "      <td>23.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>C</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.055678</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.673469</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>John Battle</td>\n",
       "      <td>28.0</td>\n",
       "      <td>Atlanta Hawks</td>\n",
       "      <td>SG</td>\n",
       "      <td>79.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>23.6</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.9</td>\n",
       "      <td>0.461</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524</td>\n",
       "      <td>18.0</td>\n",
       "      <td>109.8</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.72</td>\n",
       "      <td>1.514433</td>\n",
       "      <td>1.262142</td>\n",
       "      <td>0.823823</td>\n",
       "      <td>0.224490</td>\n",
       "      <td>1.017173</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Player   Age           Team Pos     G    GS    MP   FG   FGA  \\\n",
       "0         Doc Rivers  29.0  Atlanta Hawks  PG  79.0  79.0  32.7  5.6  12.9   \n",
       "1  Dominique Wilkins  31.0  Atlanta Hawks  SF  81.0  81.0  38.0  9.5  20.2   \n",
       "2      Duane Ferrell  25.0  Atlanta Hawks  SF  78.0   2.0  14.9  2.2   4.6   \n",
       "3       Gary Leonard  23.0  Atlanta Hawks   C   4.0   0.0   2.3  0.0   0.0   \n",
       "4        John Battle  28.0  Atlanta Hawks  SG  79.0   2.0  23.6  5.0  10.9   \n",
       "\n",
       "     FG%  ...   W/L%    GB   PS/G   PA/G   SRS     PTS_T     AST_R     STL_R  \\\n",
       "0  0.435  ...  0.524  18.0  109.8  109.0  0.72  1.692601  2.010078  2.608773   \n",
       "1  0.470  ...  0.524  18.0  109.8  109.0  0.72  2.884104  1.542618  2.059558   \n",
       "2  0.489  ...  0.524  18.0  109.8  109.0  0.72  0.679268  0.327222  0.549215   \n",
       "3  0.000  ...  0.524  18.0  109.8  109.0  0.72  0.055678  0.000000  0.000000   \n",
       "4  0.461  ...  0.524  18.0  109.8  109.0  0.72  1.514433  1.262142  0.823823   \n",
       "\n",
       "      BLK_R      3P_R  \n",
       "0  1.346939  5.594452  \n",
       "1  1.795918  5.085865  \n",
       "2  0.673469  0.000000  \n",
       "3  0.673469  0.000000  \n",
       "4  0.224490  1.017173  \n",
       "\n",
       "[5 rows x 45 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "26670219-a65a-4b68-b6b0-50ecc2c717d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors += [\"PTS_T\", \"AST_R\", \"STL_R\", \"BLK_R\", \"3P_R\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "94c972c1-1169-4b13-aa36-e8f90b84ecff",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_ap, aps, all_predictions = backtest(stats, reg, years[5:], predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "448d5eeb-a234-48a1-b184-e75e3a0e8a87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7194934347518908"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_ap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c5ef13de-4372-4831-9ed4-e9a1903e5f43",
   "metadata": {},
   "outputs": [],
   "source": [
    "stats[\"NPos\"] = stats[\"Pos\"].astype(\"category\").cat.codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "afc2e260-fe56-46a0-9647-9af4c4961ed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "stats[\"NTeam\"] = stats[\"Team\"].astype(\"category\").cat.codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "f2a1414c-7976-4c5f-b474-0859c3d69152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PG', 'SF', 'C', 'SG', 'PF', '0'], dtype=object)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats[\"Pos\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "fa396512-9769-436c-b429-7132479a95fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "stats[\"Pos\"] = stats[\"Pos\"].str.replace(\"0\",\"\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "67c913e1-5b84-4433-b263-883fc91e5e57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NTeam\n",
       "7     557\n",
       "8     554\n",
       "27    553\n",
       "17    549\n",
       "14    546\n",
       "11    543\n",
       "1     542\n",
       "12    537\n",
       "2     536\n",
       "31    535\n",
       "9     534\n",
       "15    532\n",
       "18    531\n",
       "26    531\n",
       "13    530\n",
       "10    529\n",
       "6     528\n",
       "30    526\n",
       "29    525\n",
       "34    523\n",
       "24    522\n",
       "28    520\n",
       "19    518\n",
       "33    483\n",
       "37    449\n",
       "16    397\n",
       "5     346\n",
       "20    343\n",
       "25    274\n",
       "32    263\n",
       "3     220\n",
       "22    198\n",
       "4     157\n",
       "21    143\n",
       "36    114\n",
       "35     88\n",
       "23     32\n",
       "0      17\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats[\"NTeam\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "0a657186-32c1-4e53-aac2-47c3db491105",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "rf = RandomForestRegressor(n_estimators=50, random_state=1, min_samples_split=5)\n",
    "\n",
    "mean_ap, aps, all_predictions = backtest(stats, rf, years[28:], predictors+ [\"NPos\", \"NTeam\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "cfedf285-445c-4d21-a8bb-79d42bd0dc37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8444444444444444"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_ap "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "ee8f971e-5ead-40ed-bad6-7c4551afe5bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_ap, aps, all_predictions = backtest(stats, rf, years[28:], predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "05b69ca8-a554-4b7d-85e2-a7e902b70486",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8253968253968254"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_ap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "d2d1ea77-5f1d-40a6-bb73-567f40ae3eb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "sc = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "c3e992fc-5df9-477f-89dc-ac6236207781",
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest(stats, model, years, predictors):\n",
    "    aps = []\n",
    "    all_predictions = []\n",
    "    for year in years:\n",
    "        train = stats[stats[\"Year\"] < year].copy()\n",
    "        test = stats[stats[\"Year\"] == year].copy()\n",
    "        sc.fit(train[predictors])\n",
    "        train[predictors] = sc.transform(train[predictors])\n",
    "        test[predictors] = sc.transform(test[predictors])\n",
    "        model.fit(train[predictors],train[\"Share\"])\n",
    "        predictions = model.predict(test[predictors])\n",
    "        predictions = pd.DataFrame(predictions, columns=[\"predictions\"], index=test.index)\n",
    "        combination = pd.concat([test[[\"Player\", \"Share\"]], predictions], axis=1)\n",
    "        combination = add_ranks(combination)\n",
    "        all_predictions.append(combination)\n",
    "        aps.append(find_ap(combination))\n",
    "    return sum(aps) / len(aps), aps, pd.concat(all_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "685b016d-2c39-497e-9237-4204959ff832",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_ap, aps, all_predictions = backtest(stats, rf, years[28:], predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "28a302a4-a89c-4b90-a487-044ba5b02909",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.76306352262874"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_ap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "fb464d0b-556b-4aa5-b931-e206d64734ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.54346452,  1.06984838,  1.85825657, ...,  2.32777687,\n",
       "         0.30024652,  3.71021523],\n",
       "       [ 1.00568894,  1.14910776,  1.92745428, ...,  1.53261584,\n",
       "         0.68880548,  3.299588  ],\n",
       "       [-0.38098434,  1.03021869, -0.80585553, ..., -0.65407702,\n",
       "        -0.28259194, -0.80668433],\n",
       "       ...,\n",
       "       [-6.15878969, -2.06089731, -0.87505325, ...,  1.2537452 ,\n",
       "        -0.21861401,  0.57106776],\n",
       "       [-6.15878969, -2.06089731, -0.87505325, ..., -1.44923805,\n",
       "        -0.86543039, -0.80668433],\n",
       "       [-6.15878969, -2.06089731, -0.87505325, ..., -1.44923805,\n",
       "        -0.86543039, -0.80668433]])"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc.transform(stats[predictors])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdc32e05-d0ca-414d-8414-571b8de97710",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fcd1e94-9cde-4ecb-b71b-7ec21d1ebe10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
